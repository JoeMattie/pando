"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[356],{95777:function(e,t,n){n.d(t,{Z:function(){return d}});var o=n(20411),s=n(19801),a=n(96399),r=n(85826),l="icon_t5Zl",i="npmIcon_uVGz icon_t5Zl",c="link_GZb0";var u=o.createElement("svg",{stroke:"currentColor",fill:"currentColor",strokeWidth:"0",viewBox:"0 0 576 512",focusable:"false",height:"2rem",width:"2rem",xmlns:"http://www.w3.org/2000/svg"},o.createElement("path",{d:"M288 288h-32v-64h32v64zm288-128v192H288v32H160v-32H0V160h576zm-416 32H32v128h64v-96h32v96h32V192zm160 0H192v160h64v-32h64V192zm224 0H352v128h64v-96h32v96h32v-96h32v96h32V192z"})),p=(0,s.getButtonProps)({kind:"weak",size:"s"}).className,m=(0,a.L)({size:"s"});function d(e){var t="github"===e.icon,n=t?l:i,s=t?o.createElement(r.ETn,m):u;return o.createElement("a",{className:p+" "+c,href:e.href,rel:"noopener",target:"_blank"},o.createElement("span",{className:n},s)," ",e.children)}},35898:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return h},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return m}});var o=n(60953),s=n(59005),a=(n(20411),n(70167)),r=n(95777),l=["components"],i={tags:["Development","Packages","React","React utils","useEscToClose"]},c="useEscToClose",u={unversionedId:"development/react-utils/use-esc-to-close",id:"development/react-utils/use-esc-to-close",title:"useEscToClose",description:'A custom hook for calling a function when the user presses the "Escape" key.',source:"@site/docs/development/react-utils/use-esc-to-close.mdx",sourceDirName:"development/react-utils",slug:"/development/react-utils/use-esc-to-close",permalink:"/docs/development/react-utils/use-esc-to-close",draft:!1,editUrl:"https://github.com/pluralsight/tva/edit/main/website/docs/development/react-utils/use-esc-to-close.mdx",tags:[{label:"Development",permalink:"/docs/tags/development"},{label:"Packages",permalink:"/docs/tags/packages"},{label:"React",permalink:"/docs/tags/react"},{label:"React utils",permalink:"/docs/tags/react-utils"},{label:"useEscToClose",permalink:"/docs/tags/use-esc-to-close"}],version:"current",lastUpdatedBy:"Tom Pietrosanti",frontMatter:{tags:["Development","Packages","React","React utils","useEscToClose"]},sidebar:"development",previous:{title:"Intro",permalink:"/docs/development/react-utils/intro"},next:{title:"useFocusTrap",permalink:"/docs/development/react-utils/use-focus-trap"}},p={},m=[{value:"Import",id:"import",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Example usage in Component",id:"example-usage-in-component",level:2}],d={toc:m};function h(e){var t=e.components,n=(0,s.Z)(e,l);return(0,a.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"useesctoclose"},"useEscToClose"),(0,a.kt)("p",null,'A custom hook for calling a function when the user presses the "Escape" key.'),(0,a.kt)(r.Z,{icon:"github",href:"https://github.com/pluralsight/tva/blob/main/packages/react-utils/src/hooks/useEscapeToClose.ts",mdxType:"ViewSourceLink"},"View source"),(0,a.kt)("h2",{id:"import"},"Import"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import { useEscToClose } from '@pluralsight/react-utils'\n")),(0,a.kt)("h2",{id:"basic-usage"},"Basic Usage"),(0,a.kt)("p",null,"To use ",(0,a.kt)("inlineCode",{parentName:"p"},"useEscToClose")," you only need to pass in a function returned by the ",(0,a.kt)("inlineCode",{parentName:"p"},"useCallback")," React hook."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"useEscToClose(onClose)\n")),(0,a.kt)("h2",{id:"return-value"},"Return Value"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"useEscToClose")," hook does not return any values."),(0,a.kt)("h2",{id:"example-usage-in-component"},"Example usage in Component"),(0,a.kt)("p",null,"Here is an example of how you might use ",(0,a.kt)("inlineCode",{parentName:"p"},"useEscToClose")," for an Alert Dialog combined with the ",(0,a.kt)("a",{parentName:"p",href:"/docs/development/react-utils/use-focus-trap"},"useFocusTrap")," hook, and the ",(0,a.kt)("a",{parentName:"p",href:"/docs/development/headless-styles/intro"},"headless-styles")," package."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"When using ",(0,a.kt)("inlineCode",{parentName:"p"},"useEscToClose")," within a component, make sure you are using ",(0,a.kt)("inlineCode",{parentName:"p"},"useCallback")," to define the close Function you are passing as a parameter into the hook."),(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("strong",{parentName:"p"},"Not doing this will negatively impact performance and cause unnecessary re-rendering."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"function AlertDialog(props, triggerRef) {\n  const { onClose, ...alertProps } = props\n  const wrapperRef = useRef(null)\n  const alert = getAlertDialogProps(alertProps)\n  const { cancelBtnProps, primaryBtnProps } = getButtonStyleProps(props.kind, {\n    cancel: alert.cancelBtnOptions,\n    primary: alert.primaryBtnOptions,\n  })\n  const { ref, onKeydown, initFocusTrap } = useFocusTrap(triggerRef)\n\n  function handleBackdropClick(event) {\n    event.stopPropagation()\n    if (wrapperRef.current === event.target) {\n      onClose()\n    }\n  }\n\n  // highlight-next-line\n  useEscToClose(onClose)\n\n  useEffect(() => {\n    initFocusTrap()\n  }, [initFocusTrap])\n\n  return (\n    <div {...alert.backdrop}>\n      <div {...alert.focusGuard} />\n\n      <div {...alert.wrapper} ref={wrapperRef} onClick={handleBackdropClick}>\n        <section {...alert.section} ref={ref} onKeyDown={onKeydown}>\n          <header {...alert.alertTitle}>Example Alert</header>\n          <p {...alert.alertBody}>\n            Performing this action will be permanent. Are you sure you want to\n            do it?\n          </p>\n          <footer {...alert.buttonGroup}>\n            <button {...cancelBtnProps} onClick={onClose}>\n              Cancel\n            </button>\n            <button {...primaryBtnProps}>Action</button>\n          </footer>\n        </section>\n      </div>\n\n      <div {...alert.focusGuard} />\n    </div>\n  )\n}\n\n// highlight-next-line\nconst AlertDialogEl = memo(forwardRef(NormalAlert))\n")))}h.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9202],{5735:(e,n,t)=>{t.d(n,{Z:()=>l});var a=t(70079),r=t(59788),o=t(65710),s=t(15537),i=t(28754);function l(e){const{href:n}=e,t=(0,o.L)({ariaHidden:!0,size:"s"}),l=n.includes("github")?s.Z:i.Z;return a.createElement(r.TextLink,e,a.createElement(l,t),e.children)}},70902:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>g,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var a=t(10328),r=(t(70079),t(38570)),o=t(5735);const s={tags:["React","Suspense","Image loading","Pre-loading images"],title:"useRovingTabIndex"},i=void 0,l={unversionedId:"reference/react-hooks/useRovingTabIndex",id:"reference/react-hooks/useRovingTabIndex",title:"useRovingTabIndex",description:"A hook for controlling the tabIndex prop when using a Roving Tabindex",source:"@site/docs/reference/react-hooks/useRovingTabIndex.mdx",sourceDirName:"reference/react-hooks",slug:"/reference/react-hooks/useRovingTabIndex",permalink:"/docs/reference/react-hooks/useRovingTabIndex",draft:!1,editUrl:"https://github.com/pluralsight/pando/edit/main/website/docs/reference/react-hooks/useRovingTabIndex.mdx",tags:[{label:"React",permalink:"/docs/tags/react"},{label:"Suspense",permalink:"/docs/tags/suspense"},{label:"Image loading",permalink:"/docs/tags/image-loading"},{label:"Pre-loading images",permalink:"/docs/tags/pre-loading-images"}],version:"current",lastUpdatedBy:"Casey Baggz",frontMatter:{tags:["React","Suspense","Image loading","Pre-loading images"],title:"useRovingTabIndex"},sidebar:"reference",previous:{title:"usePreloadedImage",permalink:"/docs/reference/react-hooks/usePreloadedImage"},next:{title:"useSubmenuInteraction",permalink:"/docs/reference/react-hooks/useSubmenuInteraction"}},u={},d=[{value:"Import",id:"import",level:2},{value:"Reference",id:"reference",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"My tabIndexes are not updating",id:"my-tabindexes-are-not-updating",level:3}],c={toc:d},p="wrapper";function g(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",{className:"size-xxl"},"A hook for controlling the tabIndex prop when using a Roving Tabindex strategy."),(0,r.kt)(o.Z,{icon:"github",href:"https://github.com/pluralsight/tva/blob/main/packages/react-utils/src/hooks/useRovingTabIndex.ts",mdxType:"ViewSourceLink"},"View source"),(0,r.kt)("h2",{id:"import"},"Import"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { useRovingTabIndex } from '@pluralsight/react-utils'\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"useRovingTabIndex()\n")),(0,r.kt)("h2",{id:"reference"},"Reference"),(0,r.kt)("p",null,"Call ",(0,r.kt)("inlineCode",{parentName:"p"},"useRovingTabIndex")," at the top level of the component that you would like use a Roving TabIndex strategy:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"showLineNumbers {2,6}",showLineNumbers:!0,"{2,6}":!0},"export default function MenuItem(props) {\n  const rovingTabIndexProps = useRovingTabIndex()\n\n  return (\n    <li {...menuStyles.menuListItem}>\n      <button {...menuStyles.menuItem} {...rovingTabIndexProps}>\n        {props.children}\n      </button>\n    </li>\n  )\n}\n")),(0,r.kt)("h3",{id:"parameters"},"Parameters"),(0,r.kt)("p",null,"This hook does not accept any parameters."),(0,r.kt)("h3",{id:"returns"},"Returns"),(0,r.kt)("p",null,"An Object containing a ",(0,r.kt)("inlineCode",{parentName:"p"},"tabIndex")," property of a Number value along with the event handlers needed to watch for focus events."),(0,r.kt)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,r.kt)("h3",{id:"my-tabindexes-are-not-updating"},"My tabIndexes are not updating"),(0,r.kt)("p",null,"Make sure you are spreading the return props given from this hook on the correct element. If you need to create multiple hooks, we recommend creating a reusable component that will keep the logic single-source and unique in instances."))}g.isMDXComponent=!0}}]);
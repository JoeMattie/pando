"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4750],{70167:function(n,e,t){t.d(e,{Zo:function(){return c},kt:function(){return g}});var o=t(45721);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,o)}return t}function r(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,o,a=function(n,e){if(null==n)return{};var t,o,a={},i=Object.keys(n);for(o=0;o<i.length;o++)t=i[o],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(o=0;o<i.length;o++)t=i[o],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var l=o.createContext({}),p=function(n){var e=o.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):r(r({},e),n)),t},c=function(n){var e=p(n.components);return o.createElement(l.Provider,{value:e},n.children)},d={inlineCode:"code",wrapper:function(n){var e=n.children;return o.createElement(o.Fragment,{},e)}},u=o.forwardRef((function(n,e){var t=n.components,a=n.mdxType,i=n.originalType,l=n.parentName,c=s(n,["components","mdxType","originalType","parentName"]),u=p(t),g=a,f=u["".concat(l,".").concat(g)]||u[g]||d[g]||i;return t?o.createElement(f,r(r({ref:e},c),{},{components:t})):o.createElement(f,r({ref:e},c))}));function g(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var i=t.length,r=new Array(i);r[0]=u;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=n,s.mdxType="string"==typeof n?n:a,r[1]=s;for(var p=2;p<i;p++)r[p]=t[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4353:function(n,e,t){t.r(e),t.d(e,{assets:function(){return l},contentTitle:function(){return r},default:function(){return d},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return p}});var o=t(81648),a=(t(45721),t(70167));const i={tags:["Pagination","lazy loading","large lists"],title:"Displaying Large Lists"},r=void 0,s={unversionedId:"learn/learn-pando/design-patterns/pagination",id:"version-0.4.1/learn/learn-pando/design-patterns/pagination",title:"Displaying Large Lists",description:"We offer multiple pagination patterns to display large lists of content in more manageable chunks so you can optimize the experience based on the scenario.",source:"@site/versioned_docs/version-0.4.1/learn/learn-pando/design-patterns/pagination.mdx",sourceDirName:"learn/learn-pando/design-patterns",slug:"/learn/learn-pando/design-patterns/pagination",permalink:"/docs/learn/learn-pando/design-patterns/pagination",draft:!1,editUrl:"https://github.com/pluralsight/pando/edit/main/website/versioned_docs/version-0.4.1/learn/learn-pando/design-patterns/pagination.mdx",tags:[{label:"Pagination",permalink:"/docs/tags/pagination"},{label:"lazy loading",permalink:"/docs/tags/lazy-loading"},{label:"large lists",permalink:"/docs/tags/large-lists"}],version:"0.4.1",lastUpdatedBy:"Tom Pietrosanti",frontMatter:{tags:["Pagination","lazy loading","large lists"],title:"Displaying Large Lists"},sidebar:"learn",previous:{title:"Page Loading",permalink:"/docs/learn/learn-pando/design-patterns/page-loading"},next:{title:"Migrating from Classic",permalink:"/docs/learn/learn-pando/migration"}},l={},p=[{value:"Manual Loading vs. Modern vs. Pagination Bar",id:"manual-loading-vs-modern-vs-pagination-bar",level:2},{value:"Manual Loading",id:"manual-loading",level:3},{value:"Modern",id:"modern",level:3},{value:"Pagination Bar",id:"pagination-bar",level:3},{value:"Manual Loading for Simple Lists",id:"manual-loading-for-simple-lists",level:2},{value:"Modern for Simple Lists",id:"modern-for-simple-lists",level:2},{value:"Pagination Bar for Advanced Lists",id:"pagination-bar-for-advanced-lists",level:2}],c={toc:p};function d(n){let{components:e,...t}=n;return(0,a.kt)("wrapper",(0,o.Z)({},c,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"We offer multiple pagination patterns to display large lists of content in more manageable chunks so you can optimize the experience based on the scenario."),(0,a.kt)("h2",{id:"manual-loading-vs-modern-vs-pagination-bar"},"Manual Loading vs. Modern vs. Pagination Bar"),(0,a.kt)("h3",{id:"manual-loading"},"Manual Loading"),(0,a.kt)("p",null,"Manual loading is like infinite scrolling, but the user controls when the next set of content is loaded. This approach appends the next set of content to the end of the list, allowing the user to continue scrolling with minimal disruption."),(0,a.kt)("p",null,'This pattern works well in a "discovery" scenario when the user is browsing',"\u2014","not looking for anything specific","\u2014","and aren't likely to need to revisit previously viewed content."),(0,a.kt)("h3",{id:"modern"},"Modern"),(0,a.kt)("p",null,"This approach displays only one set of content at a time while providing controls for the user to navigate forward or backward through the full list."),(0,a.kt)("p",null,"This is useful when navigating ordered content, such as comments or course listings."),(0,a.kt)("h3",{id:"pagination-bar"},"Pagination Bar"),(0,a.kt)("p",null,"The Pagination Bar expands on the Modern aproach, offering more information and control. This approach adds controls for the page size (number of items displayed) and indicates the size of the list, along with the user's position within that list."),(0,a.kt)("p",null,"The extra controls can be helpful when searching for content within larger, more complex lists, such as data tables, and works well when paired with more granular search/filtering controls."),(0,a.kt)("h2",{id:"manual-loading-for-simple-lists"},"Manual Loading for Simple Lists"),(0,a.kt)("p",null,"For Manual Loading, we place the button at the end of the content and append the next set when it is pressed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function ShowMoreButton() {\n  const [content, setContent] = useState(Array(5).fill('Old content'))\n  const styles = getPaginationProps()\n  const buttonProps = getButtonProps(styles.buttonOptions)\n\n  function handleFetchMoreData() {\n    setContent((prev) => [\n      ...prev.fill('Old content'),\n      ...Array(5).fill('New content'),\n    ])\n  }\n\n  return (\n    <div>\n      <ul>\n        {content.map((item) => (\n          <li>{item}</li>\n        ))}\n      </ul>\n      <button {...buttonProps.button} onClick={handleFetchMoreData}>\n        Show more\n      </button>\n    </div>\n  )\n}\n")),(0,a.kt)("h2",{id:"modern-for-simple-lists"},"Modern for Simple Lists"),(0,a.kt)("p",null,"For the Modern approach, we use two buttons that replace the displayed content with the next set from the indicated direction. If there is no more content in that direction, the corresponding button should be disabled."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function PaginationButtons() {\n  const [activePage, setActivePage] = useState(0)\n  const content = ['first page', 'second page', 'third page']\n  const styles = getPaginationProps()\n  const newerButtonProps = getButtonProps({\n    ...styles.buttonOptions,\n    disabled: activePage <= 0,\n  })\n  const olderButtonProps = getButtonProps({\n    ...styles.buttonOptions,\n    disabled: activePage >= content.length - 1,\n  })\n\n  function loadNewerContent() {\n    setActivePage((prev) => prev - 1)\n  }\n\n  function loadOlderContent() {\n    setActivePage((prev) => prev + 1)\n  }\n\n  return (\n    <div>\n      {content[activePage]}\n      <div {...styles.buttonGroup}>\n        <button {...newerButtonProps.button} onClick={loadNewerContent}>\n          Newer\n        </button>\n        <button {...olderButtonProps.button} onClick={loadOlderContent}>\n          Older\n        </button>\n      </div>\n    </div>\n  )\n}\n")),(0,a.kt)("h2",{id:"pagination-bar-for-advanced-lists"},"Pagination Bar for Advanced Lists"),(0,a.kt)("p",null,"The pagination bar displays the total number of items in the list, as well as the items currently being displayed. A Select controls the number of items displayed at a time, and a pair of buttons are used to load the previous or next sets of data. If there is no data in that direction, the corresponding button should be disabled."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function PaginationBar() {\n  const [rowOption, setRowOption] = useState('5')\n  const styles = getPaginationProps({ size: 'm' })\n  const selectStyles = getSelectProps({\n    ...styles.selectOptions,\n    id: 'row-count',\n    name: 'row_count',\n    value: rowOption,\n  })\n  const iconProps = getIconProps(selectStyles.iconOptions)\n  const buttonProps = getIconButtonProps(styles.iconButtonOptions)\n  const buttonIconProps = getIconProps(buttonProps.iconOptions)\n\n  function handleSelectChange(e) {\n    setRowOption(e.target.value)\n  }\n\n  return (\n    <div {...styles.container}>\n      <span {...styles.text}>\n        <strong>1-25</strong> of 12,345\n      </span>\n      <div {...selectStyles.fieldWrapper}>\n        <div {...selectStyles.selectWrapper}>\n          <select {...selectStyles.select} onChange={handleSelectChange}>\n            <option value=\"5\">5 Rows</option>\n            <option value=\"10\">10 Rows</option>\n            <option value=\"25\">25 Rows</option>\n          </select>\n          <span {...selectStyles.iconWrapper}>\n            <ChevronDownIcon {...iconProps} />\n          </span>\n        </div>\n      </div>\n      <div {...styles.buttonGroup}>\n        <button {...buttonProps.button} disabled>\n          <CaretLeftIcon {...buttonIconProps} />\n        </button>\n        <button {...buttonProps.button}>\n          <CaretRightIcon {...buttonIconProps} />\n        </button>\n      </div>\n    </div>\n  )\n}\n")))}d.isMDXComponent=!0}}]);
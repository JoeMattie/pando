"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6103],{40736:function(e,t,n){n.d(t,{Z:function(){return s}});var a=n(45721),i={base:"base_M3w8",column:"column_mb9C base_M3w8",grid:"grid_EiLr base_M3w8"};const l={alignItems:"center",column:!1,gridCols:0,justifyContent:"space-between",textAlign:"center",type:"base"};function s(e){void 0===e&&(e=l);const t=e.type??l.type,n=e.gridColumns?`repeat(${e.gridColumns}, minmax(auto, max-content))`:"initial",s={alignItems:e.alignItems,gridTemplateColumns:n,justifyContent:e.justifyContent,textAlign:e.textAlign??"center",gap:e.gap??"1rem",columnGap:e.columnGap};return a.createElement("div",{className:i[t],style:s},e.children)}},15566:function(e,t,n){n.d(t,{dS:function(){return p},fK:function(){return c},C9:function(){return d},ZP:function(){return u}});var a=n(81648),i=n(45721),l=n(98088),s=n(84140),o="grid_cC7H";function r(e){return i.createElement("li",(0,l.a)({colSpan:2}),i.createElement(s.Z,e,e.children))}function c(e){return i.createElement(r,{href:e.href},e.children??"View on Github")}function p(e){return i.createElement(r,{href:e.href},"View on Figma")}function d(e){const{className:t,...n}=(0,l.g)({cols:12,gap:8});return i.createElement("ul",(0,a.Z)({className:`${t} ${o}`},n),e.children)}function u(e){const{figma:t,github:n}=e,{className:s,...r}=(0,l.g)({cols:12,gap:8});return i.createElement("ul",(0,a.Z)({className:`${s} ${o}`},r),n&&i.createElement(c,{href:n}),t&&i.createElement(p,{href:t}))}},45945:function(e,t,n){n(45721)},34745:function(e,t,n){n.d(t,{Z:function(){return p}});var a=n(45721),i=n(40736),l=n(81648),s=n(37944),o=n(10379),r=n(17090);var c=function(e){const{control:t,fieldOptions:n}=(0,s.g)(e),i=(0,o.g)({...e,...n}),{value:c,...p}=(0,r.g)({...n,htmlFor:e.id,size:e.size,value:e.label});return a.createElement("div",t,a.createElement("div",i.wrapper,a.createElement("label",p,c),a.createElement("label",i.switchContainer,a.createElement("input",(0,l.Z)({},i.input,{onClick:e.onClick})),a.createElement("span",i.switchTrack,a.createElement("span",i.switchThumb)))))};var p=function(){const[e,t]=(0,a.useState)(!1);return a.createElement(i.Z,{type:"grid",gridColumns:"2",columnGap:"5rem",justifyContent:"start"},a.createElement(c,{id:"checked-example",label:"checked:",checked:!0}),a.createElement(c,{id:"disabled-example",label:"disabled:",disabled:!0}),a.createElement(c,{id:"invalid-example",label:"invalid:",invalid:!0}),a.createElement(c,{id:"readonly-example",label:"readonly:",readonly:!0}),a.createElement(c,{id:"required-example",label:"required:",required:!0,checked:e,onClick:function(e){t(e.target.checked)}}))}},84140:function(e,t,n){n.d(t,{Z:function(){return r}});var a=n(45721),i=n(87558),l=n(70626),s=n(13013),o=n(31936);function r(e){const{href:t}=e,n=(0,i.g)({href:t}),r=(0,l.g)(n.iconOptions),c=t.includes("github")?s.Z:o.Z;return a.createElement("a",n.link,a.createElement(c,r),e.children)}},23276:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return r},default:function(){return m},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return d}});var a=n(81648),i=(n(45721),n(70167)),l=n(34745),s=n(15566);n(45945);const o={tags:["toggle","single-select","field","form"],title:"Switch"},r=void 0,c={unversionedId:"reference/components/switch",id:"version-0.4.1/reference/components/switch",title:"Switch",description:"Used as an alternative to the Checkbox for choosing between enabled and",source:"@site/versioned_docs/version-0.4.1/reference/components/switch.mdx",sourceDirName:"reference/components",slug:"/reference/components/switch",permalink:"/docs/reference/components/switch",draft:!1,editUrl:"https://github.com/pluralsight/pando/edit/main/website/versioned_docs/version-0.4.1/reference/components/switch.mdx",tags:[{label:"toggle",permalink:"/docs/tags/toggle"},{label:"single-select",permalink:"/docs/tags/single-select"},{label:"field",permalink:"/docs/tags/field"},{label:"form",permalink:"/docs/tags/form"}],version:"0.4.1",lastUpdatedBy:"Casey Baggz",frontMatter:{tags:["toggle","single-select","field","form"],title:"Switch"},sidebar:"reference",previous:{title:"Skeleton",permalink:"/docs/reference/components/skeleton"},next:{title:"Table",permalink:"/docs/reference/components/table"}},p={},d=[{value:"Import",id:"import",level:2},{value:"Anatomy",id:"anatomy",level:2},{value:"Usage",id:"usage",level:2},{value:"Basic Switch",id:"basic-switch",level:3},{value:"Sizes",id:"sizes",level:3},{value:"Size Mapping",id:"size-mapping",level:4},{value:"States",id:"states",level:3},{value:"Reference",id:"reference",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"Behavior",id:"behavior",level:2},{value:"Layout",id:"layout",level:3},{value:"Usage",id:"usage-1",level:3},{value:"Accessibility",id:"accessibility",level:2}],u={toc:d};function m(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",{className:"size-xxl"},"Used as an alternative to the Checkbox for choosing between enabled and disabled states."),(0,i.kt)(s.ZP,{github:"https://github.com/pluralsight/pando/tree/main/packages/headless-styles/src/components/Switch",figma:"https://www.figma.com/file/ZmH4XsZS5WnKeo28ylM5x1/Pando-UI-kit-(Web)?node-id=1214%3A50560&t=YLA3FBYLefNvfeuf-0",mdxType:"DocsLinkBar"}),(0,i.kt)("h2",{id:"import"},"Import"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"import { getSwitchProps } from '@pluralsight/headless-styles'\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"interface SwitchOptions {\n  checked: boolean\n  disabled?: boolean\n  id: string\n  indeterminate?: boolean\n  invalid?: boolean\n  name: string\n  readOnly?: boolean\n  required?: boolean\n  size?: 's' | 'm'\n  value: string\n}\n\ngetSwitchProps(options?: SwitchOptions)\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"import type { SwitchOptions } from '@pluralsight/headless-styles/types'\n")),(0,i.kt)("h2",{id:"anatomy"},"Anatomy"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Container"),(0,i.kt)("li",{parentName:"ol"},"Input"),(0,i.kt)("li",{parentName:"ol"},"Track"),(0,i.kt)("li",{parentName:"ol"},"Thumb"),(0,i.kt)("li",{parentName:"ol"},"Label")),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("h3",{id:"basic-switch"},"Basic Switch"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function BasicSwitch() {\n  const [checked, setChecked] = useState(false)\n  const { control, fieldOptions } = getFormControlProps()\n  const switchProps = getSwitchProps({\n    ...fieldOptions,\n    checked,\n    id: 'notfications',\n    name: 'add_notifications',\n  })\n  const { value, ...labelProps } = getFormLabelProps({\n    htmlFor: 'notifications',\n    value: 'Sign up for notifications',\n  })\n\n  function handleChange() {\n    setChecked((prev) => !prev)\n  }\n\n  return (\n    <div {...control}>\n      <div {...switchProps.wrapper}>\n        <label {...labelProps}>{value}</label>\n        <label {...switchProps.switchContainer}>\n          <input {...switchProps.input} onClick={handleChange} />\n          <span {...switchProps.switchTrack}>\n            <span {...switchProps.switchThumb} />\n          </span>\n        </label>\n      </div>\n    </div>\n  )\n}\n")),(0,i.kt)("h3",{id:"sizes"},"Sizes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function SwitchSizes() {\n  const [checked, setChecked] = useState(false)\n  const { fieldOptions } = getFormControlProps()\n  const switchProps = getSwitchProps({\n    ...fieldOptions,\n    checked,\n    id: 'notfications',\n    name: 'add_notifications',\n  })\n  const { value, ...labelProps } = getFormLabelProps({\n    htmlFor: 'notifications',\n    value: 'Sign up for notifications',\n  })\n  const smallSwitchProps = getSwitchProps({\n    ...fieldOptions,\n    checked,\n    id: 'notfications',\n    name: 'add_notifications',\n    size: 's',\n  })\n  const smallLabelProps = getFormLabelProps({\n    htmlFor: 'notifications',\n    value: 'Sign up for notifications',\n  })\n\n  function handleChange() {\n    setChecked((prev) => !prev)\n  }\n\n  return (\n    <form>\n      <div {...switchProps.wrapper}>\n        <label {...labelProps}>{value}</label>\n        <label {...switchProps.switchContainer}>\n          <input {...switchProps.input} onClick={handleChange} />\n          <span {...switchProps.switchTrack}>\n            <span {...switchProps.switchThumb} />\n          </span>\n        </label>\n      </div>\n\n      <div {...smallSwitchProps.wrapper}>\n        <label {...smallLabelProps}>{smallLabelProps.value}</label>\n        <label {...smallSwitchProps.switchContainer}>\n          <input {...smallSwitchProps.input} onClick={handleChange} />\n          <span {...smallSwitchProps.switchTrack}>\n            <span {...smallSwitchProps.switchThumb} />\n          </span>\n        </label>\n      </div>\n    </form>\n  )\n}\n")),(0,i.kt)("h4",{id:"size-mapping"},"Size Mapping"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Switch size rules."',title:'"Switch',size:!0,'rules."':!0},"{\n  s: 'Use in condensed areas where the default size is too large.',\n  m: 'Should be used in most, if not all cases.'\n}\n")),(0,i.kt)("h3",{id:"states"},"States"),(0,i.kt)(l.Z,{mdxType:"SwitchStates"}),(0,i.kt)("admonition",{title:"Form field and state",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"In order to easily manage the state and maintain Accessibility of your form field, the basic state statuses should come from the result of the FormControl API.")),(0,i.kt)("h2",{id:"reference"},"Reference"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"getSwitchProps(options?: SwitchOptions)\n")),(0,i.kt)("h3",{id:"parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"options"),": An Object containing properties derived from the FormControl.fieldOptions results (disabled, invalid, readOnly, required) to determine the styling of the Switch state. An id and optional name property that accept a String value which connected Accessibility properties from the label to the Switch. A checked and optional indeterminate property that accept a Boolean value to determine the styling of the Switch state. A value property that accepts a String for form submission. An optional size property that accepts a String value of ",(0,i.kt)("inlineCode",{parentName:"li"},"'s' | 'm'")," to determine the styling of the Switch elements relative to the size.")),(0,i.kt)("h3",{id:"returns"},"Returns"),(0,i.kt)("p",null,"An Object matching the ",(0,i.kt)("a",{parentName:"p",href:"#anatomy"},"Anatomy")," containing ",(0,i.kt)("inlineCode",{parentName:"p"},"className")," and a11y properties relevant to each element/section."),(0,i.kt)("h2",{id:"behavior"},"Behavior"),(0,i.kt)("h3",{id:"layout"},"Layout"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Do")," use multiple Switches in a vertical list."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Don't")," use multiple Switches in a single row."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Do")," provide a Label with a Switch."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Don't")," use a Switch inline without a Label. Instead use a hidden Label."),(0,i.kt)("h3",{id:"usage-1"},"Usage"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Do")," use a Switch for giving users an way to opt-in to an optional feature."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Don't")," use a Switch for collecting consent. Instead us a ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/components/checkbox"},"Checkbox"),"."),(0,i.kt)("h2",{id:"accessibility"},"Accessibility"),(0,i.kt)("p",null,"The Pando Switch API combined with semantic HTML allow the Switch to be fully accessible and screen-readable."))}m.isMDXComponent=!0}}]);